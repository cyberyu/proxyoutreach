# Dockerfile.lightweight
# Lightweight production image with MySQL server but without embedded SQL dumps
# SQL dumps will be mounted from EFS at runtime

FROM ubuntu:22.04

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Environment variables for MySQL
ENV MYSQL_ROOT_PASSWORD=rootpass
ENV MYSQL_DATABASE=proxy
ENV MYSQL_USER=webapp
ENV MYSQL_PASSWORD=webapppass

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    gnupg \
    lsb-release \
    ca-certificates \
    apt-transport-https \
    software-properties-common \
    python3 \
    python3-pip \
    mysql-server \
    mysql-client \
    supervisor \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /var/cache/apt/archives/*

# Install Node.js 20
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /var/cache/apt/archives/*

# Set working directory
WORKDIR /usr/src/app

# Copy Python requirements and install
COPY requirements.txt /tmp/requirements.txt
RUN pip3 install -r /tmp/requirements.txt \
    && rm -rf /root/.cache/pip \
    && rm /tmp/requirements.txt

# Copy package.json and install Node.js dependencies
COPY package*.json ./
RUN npm install --only=production \
    && npm cache clean --force

# Copy application code (excluding SQL dumps via .dockerignore)
COPY . .

# Create necessary directories for EFS mounts
RUN mkdir -p /usr/src/app/data/dumps \
    && mkdir -p /usr/src/app/data/sql \
    && mkdir -p /usr/src/app/data/parquet

# Copy database setup scripts
COPY docker/setup-databases.sh /usr/src/app/docker/
COPY docker/startup-efs.sh /usr/src/app/docker/
COPY docker/supervisord.conf /etc/supervisor/conf.d/

# Make scripts executable
RUN chmod +x /usr/src/app/docker/*.sh

# Final cleanup to minimize image size
RUN apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /var/cache/apt/archives/* \
    && rm -rf /var/cache/debconf/* \
    && rm -rf /root/.cache \
    && rm -rf /root/.npm \
    && rm -rf /tmp/* \
    && rm -rf /var/tmp/* \
    && rm -rf /var/cache/apt/* \
    && rm -rf /usr/share/doc/* \
    && rm -rf /usr/share/man/* \
    && rm -rf /usr/share/locale/* \
    && find /var/log -type f -exec truncate -s 0 {} \; \
    && find /usr/share -name "*.pyc" -delete \
    && find /usr/lib -name "*.pyc" -delete

# Configure MySQL
RUN service mysql start && \
    mysql -u root -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '${MYSQL_ROOT_PASSWORD}';" && \
    mysql -u root -p${MYSQL_ROOT_PASSWORD} -e "CREATE USER IF NOT EXISTS '${MYSQL_USER}'@'%' IDENTIFIED BY '${MYSQL_PASSWORD}';" && \
    mysql -u root -p${MYSQL_ROOT_PASSWORD} -e "GRANT ALL PRIVILEGES ON *.* TO '${MYSQL_USER}'@'%' WITH GRANT OPTION;" && \
    mysql -u root -p${MYSQL_ROOT_PASSWORD} -e "FLUSH PRIVILEGES;" && \
    service mysql stop && \
    rm -rf /var/lib/mysql/ib_logfile* && \
    rm -rf /var/log/mysql/* && \
    rm -rf /tmp/* && \
    rm -rf /var/tmp/* && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    rm -rf /var/cache/apt/archives/* && \
    rm -rf /root/.cache && \
    find /var/log -type f -exec truncate -s 0 {} \;

# Expose ports
EXPOSE 3000 3306

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=20s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Option 1: ECS-managed EFS mounting (recommended for production)
CMD ["/usr/src/app/docker/startup-efs.sh"]

# Option 2: Container self-mounting EFS (for development/testing)
# CMD ["/usr/src/app/docker/startup-efs-option2.sh"]

# Default: Use supervisor for multi-process management (no EFS integration)
# CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
